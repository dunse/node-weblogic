var SuperMbean = require(__dirname + '/../base').SuperMbean;
var util = require('util');
var Cluster = require(__dirname + '/cluster');

var Server = function(proxy) {
  this._attributeFunctions = [ 
    'AcceptBacklog', 
    'AdministrationPort', 
    'AdministrationProtocol', 
    'AdminReconnectIntervalSeconds', 
    'AutoKillIfFailed', 
    'AutoRestart', 
    'ClusterRuntime', 
    'ClusterWeight', 
    'CompleteCOMMessageTimeout', 
    'CompleteHTTPMessageTimeout', 
    'CompleteIIOPMessageTimeout', 
    'CompleteMessageTimeout', 
    'CompleteT3MessageTimeout', 
    'CustomIdentityKeyStoreFileName', 
    'CustomIdentityKeyStorePassPhraseEncrypted', 
    'CustomIdentityKeyStoreType', 
    'CustomTrustKeyStoreFileName', 
    'CustomTrustKeyStorePassPhraseEncrypted', 
    'CustomTrustKeyStoreType', 
    'DefaultIIOPPasswordEncrypted', 
    'DefaultIIOPUser', 
    'DefaultProtocol', 
    'DefaultSecureProtocol', 
    'DefaultTGIOPPasswordEncrypted', 
    'DefaultTGIOPUser', 
    'DGCIdlePeriodsUntilTimeout', 
    'ExternalDNSName', 
    'ExtraEjbcOptions', 
    'ExtraRmicOptions', 
    'GracefulShutdownTimeout', 
    'HealthCheckIntervalSeconds', 
    'HealthCheckStartDelaySeconds', 
    'HealthCheckTimeoutSeconds', 
    'HostsMigratableServices', 
    'IdleConnectionTimeout', 
    'IdleIIOPConnectionTimeout', 
    'IdlePeriodsUntilTimeout', 
    'IIOPTxMechanism', 
    'InterfaceAddress', 
    'JavaCompiler', 
    'JavaCompilerPostClassPath', 
    'JavaCompilerPreClassPath', 
    'JavaStandardTrustKeyStorePassPhraseEncrypted', 
    'JDBCLLRTableName', 
    'JDBCLoginTimeoutSeconds', 
    'JNDITransportableObjectFactoryList', 
    'KeyStores', 
    'ListenAddress', 
    'ListenDelaySecs', 
    'ListenersBindEarly', 
    'ListenPort', 
    'ListenThreadStartDelaySecs', 
    'LoginTimeoutMillis', 
    'LowMemoryGCThreshold', 
    'LowMemoryGranularityLevel', 
    'LowMemorySampleSize', 
    'LowMemoryTimeInterval', 
    'MaxCOMMessageSize', 
    'MaxHTTPMessageSize', 
    'MaxIIOPMessageSize', 
    'MaxMessageSize', 
    'MaxOpenSockCount', 
    'MaxT3MessageSize', 
    'MBeanInfo', 
    'MessagingBridgeThreadPoolSize', 
    'MuxerClass', 
    'Name', 
    'NMSocketCreateTimeoutInMillis', 
    'Notes', 
    'ObjectName', 
    'Parent', 
    'PeriodLength', 
    'PreferredSecondaryGroup', 
    'ReplicationGroup', 
    'RestartDelaySeconds', 
    'RestartIntervalSeconds', 
    'RestartMax', 
    'ServerLifeCycleTimeoutVal', 
    'ServerVersion', 
    'SocketReaders', 
    'StagingDirectoryName', 
    'StagingMode', 
    'StartupMode', 
    'StartupTimeout', 
    'StuckThreadMaxTime', 
    'StuckThreadTimerInterval', 
    'SystemPasswordEncrypted', 
    'ThreadPoolPercentSocketReaders', 
    'TransactionLogFilePrefix', 
    'TransactionLogFileWritePolicy', 
    'TunnelingClientPingSecs', 
    'TunnelingClientTimeoutSecs', 
    'Type', 
    'UploadDirectoryName', 
    'Use81StyleExecuteQueues', 
    'VerboseEJBDeploymentEnabled', 
];
  this._attributeVars = [ 
    'AutoMigrationEnabled', 
    'CachingDisabled', 
    'ClasspathServletDisabled', 
    'ClientCertProxyEnabled', 
    'COMEnabled', 
    'DefaultInternalServletsDisabled', 
    'HttpdEnabled', 
    'HttpTraceSupportEnabled', 
    'IIOPEnabled', 
    'IgnoreSessionsDuringShutdown', 
    'InstrumentStackTraceEnabled', 
    'JDBCLoggingEnabled', 
    'JMSDefaultConnectionFactoriesEnabled', 
    'ListenPortEnabled', 
    'LogRemoteExceptionsEnabled', 
    'ManagedServerIndependenceEnabled', 
    'MessageIdPrefixEnabled', 
    'MSIFileReplicationEnabled', 
    'NativeIOEnabled', 
    'OutboundEnabled', 
    'OutboundPrivateKeyEnabled', 
    'ReverseDNSAllowed', 
    'SocketBufferSizeAsChunkSize', 
    'TGIOPEnabled', 
    'TunnelingEnabled', 
    'WeblogicPluginEnabled'
];
///    'StdoutDebugEnabled', 'StdoutEnabled', 'EnabledForDomainLog', 'JDBCLogFileName', 'Registered', 'StdoutFormat', 'StdoutLogStack', 'StdoutSeverityLevel', 
//    'CustomIdentityKeyStorePassPhrase', 
//    'CustomTrustKeyStorePassPhrase', 'DefaultIIOPPassword', 'DefaultTGIOPPassword', 'JavaStandardTrustKeyStorePassPhrase', 
  SuperMbean.call(this, proxy);
}

util.inherits(Server, SuperMbean);

// Child MBeans
Server.prototype.getCluster = function(next) {
  this.proxy.getCluster(function(err, result) {
    if (err) { return next(err); }
    next(err, new Cluster(result));
  });
}

module.exports = Server;



